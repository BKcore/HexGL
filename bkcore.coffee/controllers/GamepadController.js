// Generated by CoffeeScript 1.4.0

/*
  GamepadController (Orientation + buttons) for touch devices
  
  @class bkcore.GamepadController
  @author Mahesh Kulkarni <http://twitter.com/maheshkk>
*/


(function() {
  var GamepadController, exports, _base;

  GamepadController = (function() {

    GamepadController.isCompatible = function() {
      return ('getGamepads' in navigator) || ('webkitGetGamepads' in navigator);
    };

    /*
        Creates a new GamepadController
    */


    function GamepadController(buttonPressCallback) {
      this.buttonPressCallback = buttonPressCallback;
      this.active = true;
      this.leftStickArray = [];
      this.rightStickArray = [];
    }

    /*
        @public
    */


    GamepadController.prototype.updateAvailable = function() {
      var gamepads, _ref, _ref1, _ref2, _ref3;
      if (!this.active) {
        return false;
      }
      gamepads = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads();
      if (!(gamepads != null ? gamepads[0] : void 0)) {
        return false;
      }
      this.leftStick = (_ref = gamepads[0].axes) != null ? _ref[1] : void 0;
      this.rightStick = (_ref1 = gamepads[0].axes) != null ? _ref1[2] : void 0;
      this.pause = (_ref2 = gamepads[0].buttons) != null ? _ref2[1] : void 0;
      this.restart = (_ref3 = gamepads[0].buttons) != null ? _ref3[0] : void 0;
      this.buttonPressCallback(this.leftStick, this.restart, this.pause);
      return true;
    };

    return GamepadController;

  })();

  exports = exports != null ? exports : this;

  exports.bkcore || (exports.bkcore = {});

  (_base = exports.bkcore).controllers || (_base.controllers = {});

  exports.bkcore.controllers.GamepadController = GamepadController;

}).call(this);
